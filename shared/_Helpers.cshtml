@inherits ToSic.Sxc.Dnn.RazorComponent
@using System.Dynamic;
@using System.IO;
@using ToSic.Razor.Blade;

@functions {
  public class LinkInfo
  {
    public string Window;
    public string Icon;
    public bool Found;
  }

  // check a link, prepare target window, icon etc. based on various settings
	public LinkInfo LinkInfos(string link, string window, string icon) {
    var fileExtensions = new List<string> { ".pdf", ".doc", ".docx", ".xls", ".xlsx", ".ppt", ".pptx", ".ppsx", ".txt" };

    // this will contain the result
    var lInfo = new LinkInfo();

    // found something?
    var found = Text.Has(link);
    lInfo.Found = found;

    // process remaining properties, in case we want to override them with automatic stuff
    if(found) {
      var linkExt = System.IO.Path.GetExtension(link.ToLower());
      var isDoc = fileExtensions.Contains(linkExt);

      // try to find out if it's a local link
      var isInternal = link.Contains(Dnn.Portal.PortalAlias.HTTPAlias)
        || link.StartsWith("/") // absolute link in same site
        || link.StartsWith("#") // hash-link on same page
        || link.StartsWith("."); // relative link from this page

      // auto-detect icon based on file type if it's stays on the same site
      // but only if no icon was specified already
      if(String.IsNullOrEmpty(icon))
        icon = isDoc
          ? "fas fa-file" // if doc, then file-icon
          : (isInternal
            ? "fas fa-caret-right" // else if internal, use play-button
            : "fas fa-external-link-alt");   // else if external, show "open new window"

      // optionally auto-detect the window
      if(String.IsNullOrEmpty(window) || window == "auto")
        window = isInternal && !isDoc ? "_self" : "_blank";
    }

    // add properties
    lInfo.Icon = icon;
    lInfo.Window = window;

    return lInfo;
    // we could add these properties too, but at the moment they are not needed
    // linkInfo.Add("Extension", linkExt);
    // linkInfo.Add("IsDoc", isDoc);
	}

  public class MapInfo
  {
    public double GpsLong;
    public double GpsLat;
    public string DirectionUrl;
  }

  // check a link, prepare target window, icon etc. based on various settings
	public MapInfo MapInfos(dynamic content) {
    // this will contain the result
    var mInfo = new MapInfo();

    // Language is used for the map-link
    var language = Dnn.Portal.CultureCode.Split(new[] { '-' })[0];

    // GPS is a JSON field, so we must use AsDynamic to access the properties
    var gps = AsDynamic(content.GPS);
    var gpsLong = gps.Longitude ?? 0; // use 0 if not defined
    var gpsLat = gps.Latitude ?? 0;	  // use 0 if not defined

    // this link will be used to open the Google-Directions in a new window
    var directionurl = gpsLong > 0
      // if we have coordinates, use them
      ? "https://www.google.com/maps/dir/" + gpsLat + "," + gpsLong
      // otherwise use the address
      : "https://maps.google.com/maps?daddr="
        + (content.Street + " " + content.ZipCode + " " + content.City + " " + content.Country)
          .Replace(" ", "+")
        + "&amp;saddr=&amp;f=d&amp;hl=" + language + "&amp;ie=UTF8&amp;z=16";

    // add properties
    mInfo.GpsLong = gpsLong;
    mInfo.GpsLat = gpsLat;
    mInfo.DirectionUrl = directionurl;

    return mInfo;
	}

}