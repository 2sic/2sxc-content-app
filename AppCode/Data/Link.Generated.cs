// DO NOT MODIFY THIS FILE - IT IS AUTO-GENERATED
// See also: https://go.2sxc.org/copilot-data
// To extend it, create a "Link.cs" with this contents:
/*
namespace AppCode.Data
{
  public partial class Link
  {
    // Add your own properties and methods here
  }
}
*/

// Generator:   DataModelGenerator v17.02.01
// App/Edition: Content/
// User:        2sic Web-Developer
// When:        2024-02-29 11:35:49Z
using ToSic.Sxc.Adam;

namespace AppCode.Data
{
  // This is a generated class for Link
  // To extend/modify it, see instructions above.

  /// <summary>
  /// Link data. <br/>
  /// Generated 2024-02-29 11:35:49Z. Re-generate whenever you change the ContentType. <br/>
  /// <br/>
  /// Default properties such as `.Title` or `.Id` are provided in the base class. <br/>
  /// Most properties have a simple access, such as `.Description`. <br/>
  /// For other properties or uses, use methods such as
  /// .IsNotEmpty("FieldName"), .String("FieldName"), .Children(...), .Picture(...), .Html(...).
  /// </summary>
  public partial class Link: LinkAutoGenerated
  {  }

  /// <summary>
  /// Auto-Generated base class for Link.
  /// </summary>
  public abstract class LinkAutoGenerated: Custom.Data.Item16
  {
    /// <summary>
    /// Description as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Description", scrubHtml: true) etc.
    /// </summary>
    public string Description => _item.String("Description", fallback: "");

    /// <summary>
    /// Icon as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Icon", scrubHtml: true) etc.
    /// </summary>
    public string Icon => _item.String("Icon", fallback: "");

    /// <summary>
    /// Image as link (url). <br/>
    /// To get the underlying value like 'file:72' use String("Image")
    /// </summary>
    public string Image => _item.Url("Image");

    /// <summary>
    /// Get the file object for Image - or null if it's empty or not referencing a file.
    /// </summary>
    public IFile ImageFile => _item.File("ImageFile");

    /// <summary>
    /// Get the folder object for Image.
    /// </summary>
    public IFolder ImageFolder => _item.Folder("ImageFolder");

    /// <summary>
    /// Link as link (url). <br/>
    /// To get the underlying value like 'file:72' use String("Link")
    /// </summary>
    public string Link => _item.Url("Link");

    /// <summary>
    /// Get the file object for Link - or null if it's empty or not referencing a file.
    /// </summary>
    public IFile LinkFile => _item.File("LinkFile");

    /// <summary>
    /// Get the folder object for Link.
    /// </summary>
    public IFolder LinkFolder => _item.Folder("LinkFolder");

    /// <summary>
    /// LinkText as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("LinkText", scrubHtml: true) etc.
    /// </summary>
    public string LinkText => _item.String("LinkText", fallback: "");

    /// <summary>
    /// Title as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Title", scrubHtml: true) etc.
    /// </summary>
    public string Title => _item.String("Title", fallback: "");

    /// <summary>
    /// Window as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Window", scrubHtml: true) etc.
    /// </summary>
    public string Window => _item.String("Window", fallback: "");
  }
}