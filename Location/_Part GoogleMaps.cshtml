@inherits Custom.Hybrid.Razor12
@using ToSic.Razor.Blade;
@using Newtonsoft.Json;
@{
  // Activate turnOn in the page - see https://r.2sxc.org/turnon
  GetService<ToSic.Sxc.Web.IPageService>().Activate("turnOn");

  // Merge the Presentation with Resources & Settings to get the best possible settings/resources
  // Uses the DynamicStack feature https://r.2sxc.org/dynamic-stack
  var mapResources = AsDynamic(Content.Presentation, Resources);
  var mapSettings = AsDynamic(Content.Presentation.GoogleMaps, Settings.GoogleMaps);

  // They Google API key is in the App-Settings. See instructions: https://azing.org/2sxc/r/ippFQYkz
  // Get key from settings and remove empty lines. 
  var googleApikey = mapSettings.ApiKey.Replace("\n", ""); 

  // we need a unique ID for the map, in case there are many on the same page
  var mapId = CmsContext.Module.Id;

  // GPS is a JSON field, so we must use AsDynamic to access the properties
  var gps = AsDynamic(Content.GPS);
  var gpsLong = (gps.Longitude ?? 0).ToString("R"); // use 0 if not defined, R means dot-number no matter what culture
  var gpsLat = (gps.Latitude ?? 0).ToString("R");	  // see above


  // TODO: 2RO - DUPLICATE ON bs3

}

@* Instruct turnOn to activate GoogleMaps with the API key once everything is loaded - uses turnOn https://r.2sxc.org/turnon *@
<turnOn turn-on='{ "await": ["window.$"], "run": "window.appContent.maps.load()", "data": "@googleApikey" }'></turnOn>

@* Instruct turnOn to init this specific Map once everything is loaded - uses turnOn https://r.2sxc.org/turnon *@
<turnOn turn-on='{ "run": "window.appContent.maps.configureMap()", "data": { 
  "domId": "GoogleMap-@mapId", 
  "icon": "@Text.First(mapSettings.Icon, "")",
  "lat": @gpsLat,
  "lng": @gpsLong, 
  "zoom": @mapSettings.InitialZoom, 
  "info": "@Content.Company",
  "warn": @(mapSettings.ShowApiKeyWarning == true ? "true" : "false")
}}'></turnOn>